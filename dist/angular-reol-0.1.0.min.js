/*! angular-reol 20-05-2013 */
(function(){"use strict";angular.module("reol",[]).factory("reol",["$parse",function(n){var t=function t(n){var t=this;n=n||{},this.list=[],this.index={},this.indexes={},angular.forEach(n,function(r,i){t.index[i]={},t.indexes[i]=n[i]})};return t.prototype.add=function(n,t){var r,i,e=this;if(t=t||function(n){if(angular.isDefined(n))throw n},!angular.isObject(n)&&!angular.isArray(n))return t(Error("add() requires an object or array of objects")),this;if(angular.isArray(n)){for(r=0,i=n.length;i>r;r++)this.add(n[r]);return this}return this.list.push(n),angular.forEach(this.indexes,function(t,r){e._addToIndex(r,n)}),t(),this},t.prototype.merge=function(n,t){return this.add(n,t)},t.prototype.find=function(n,t,r){var i,e,o;if(t=t||angular.noop,angular.isString(n))i=n;else if(angular.isObject(n)){for(e in n)if(n.hasOwnProperty(e)){if(angular.isDefined(i))throw Error("not implemented: object passed to find() must have only one condition");i=e}}else if(angular.isDefined(n))throw Error("find() expects a string, an object as the first parameter, or no parameters");return i?(o=this.index[i]?this.findInIndex(i,n[i])||[]:this.findInList(i,n[i],r),o=!o&&[]||angular.isUndefined(o.length)&&o||[o],t(null,o),o):(t(this.toArray()),this.toArray())},t.prototype.findOne=function(n,t){return this.find(n,function(n,r){t&&t(n,r[0])},!0)[0]},t.prototype.findInIndex=function(n,t){return this.index[n][angular.toJson(t)]},t.prototype.findInList=function(n,t,r){var i,e,o=[],a=this.list;for(i=0,e=a.length;e>i&&(!a[i].hasOwnProperty(n)||a[i][n]!==t||(o.push(a[i]),!r));i++);return o},t.prototype.toArray=function(){return this.list},t.prototype._addToIndex=function(t,r){var i="";return r[t]?i=angular.toJson(r[t]):t.indexOf(".")&&(i=angular.toJson(n(t)(r))),angular.isUndefined(i)?!1:this.index[t].hasOwnProperty(i)?!1:(this.index[t][i]=r,!0)},function(n){return new t(n)}}])})();